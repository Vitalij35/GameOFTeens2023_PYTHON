from aiogram import Bot, Dispatcher
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from aiogram.types import Message
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hlink
from environs import Env

tar = [0, 0, 0, 0, 0, 0, 0]

env = Env()
env.read_env(".env")

bot = Bot(token=env.str("BOT_TOKEN"), parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class FSM(StatesGroup):
    Start = State()
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()


def start_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ü–æ—á–Ω—ñ–º–æ!üòâ'))
    return kb


def q1_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–î–æ 10–≥–±'), KeyboardButton('10-30–≥–±üëç'), KeyboardButton('–ü–æ–Ω–∞–¥ 30–≥–±üòé'))
    return kb


def q2_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ú–∞–π–∂–µ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω—É—éü§´'), KeyboardButton('–Ü–Ω–æ–¥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω—É—éüòÄ'),
           KeyboardButton('–ü–æ—Å—Ç—ñ–π–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É—éüìû'))
    return kb


def q3_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ù—ñ–∫–æ–ª–∏‚ùå'), KeyboardButton('–Ü–Ω–∫–æ–ª–∏üòÄ'), KeyboardButton('–î–æ—Å–∏—Ç—å —á–∞—Å—Ç–æüòá'),
           KeyboardButton('–ü–æ—Å—Ç—ñ–π–Ω–æüéñ'))
    return kb


def q4_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ú–∞–π–∂–µ –Ω–µ –±—É–≤–∞—é‚ùå'), KeyboardButton('–Ü–Ω–∫–æ–ª–∏ –±—É–≤–∞—éüòâ'), KeyboardButton('–ü–æ—Å—Ç—ñ–π–Ω–æ –±—É–≤–∞—éüòé'))
    return kb


def q5_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–î–ª—è —Å–µ–±–µüì±'), KeyboardButton('–î–ª—è –¥–∏—Ç–∏–Ω–∏üßí'), KeyboardButton('–î–ª—è –ø–ª–∞–Ω—à–µ—Ç—É'),
           KeyboardButton('–î–ª—è “ê–∞–¥–∂–µ—Ç—É‚åöÔ∏è'))
    return kb


@dp.message_handler(commands="start")
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç lifecell —ñ —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –æ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞—Ä–∏—Ñ! üòâ\n"
                         "–í—Å–µ –¥—É–∂–µ –ø—Ä–æ—Å—Ç–æ!ü§ó –¢–æ–±—ñ –∑–Ω–∞–¥–æ–±–∏—Ç—Å—è –ª–∏—à–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ 5 –∑–∞–ø–∏—Ç–∞–Ω—å\n"
                         "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–ª–∞–≤—ñ—à—É ¬´–ü–æ—á–Ω—ñ–º–æ!¬ª —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!",
                         reply_markup=start_kb())
    await FSM.Start.set()


@dp.message_handler(state=FSM.Start)
async def Q1(message: Message):
    if message.text == '–ü–æ—á–Ω—ñ–º–æ!üòâ':
        await message.answer("–ß—É–¥–æ–≤–æ!‚ú®\n\n"
                             "–û—Å—å –ø–µ—Ä—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
                             "–Ø–∫–∏–π –æ–±—Å—è–≥ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–∏ –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ?",
                             reply_markup=q1_kb())
        await FSM.Q1.set()


@dp.message_handler(state=FSM.Q1)
async def Q2(message: Message):
    global tar
    match message.text:
        case "–î–æ 10–≥–±":
            tar[2] = tar[2] + 2
        case "10-30–≥–±":
            tar[1] = tar[1] + 2
        case "–ü–æ–Ω–∞–¥ 30–≥–±üòé":
            tar[0], tar[3] = tar[0] + 2, tar[3] + 1

    await message.answer("2 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
                         "–Ø–∫ —á–∞—Å—Ç–æ –≤–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É—î—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä–∏ —ñ–Ω—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤?",
                         reply_markup=q2_kb())
    await FSM.Q2.set()


@dp.message_handler(state=FSM.Q2)
async def Q3(message: Message):
    global tar
    match message.text:
        case "–ú–∞–π–∂–µ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω—É—é":
            tar[2] = tar[2] + 1
        case "–Ü–Ω–æ–¥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω—É—é":
            tar[1] = tar[1] + 1
        case "–ü–æ—Å—Ç—ñ–π–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É—éüìû":
            tar[0], tar[3] = tar[0] + 1, tar[3] + 1

    await message.answer("3 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
                         "–Ø–∫ —á–∞—Å—Ç–æ –≤–∏ —Ä–æ–∑–¥–∞—î—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç?",
                         reply_markup=q3_kb())
    await FSM.Q3.set()


@dp.message_handler(state=FSM.Q3)
async def Q4(message: Message):
    global tar
    match message.text:
        case "–Ü–Ω–∫–æ–ª–∏üòÄ":
            tar[1] = tar[1] + 1
        case "–î–æ—Å–∏—Ç—å —á–∞—Å—Ç–æüòá":
            tar[1] = tar[1] + 2
        case "–ü–æ—Å—Ç—ñ–π–Ω–æüéñ":
            tar[1] = tar[1] + 3

    await message.answer("4 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
                         "–Ø–∫ —á–∞—Å—Ç–æ –≤–∏ –±—É–≤–∞—î—Ç–µ –∑–∞ –∫–æ—Ä–¥–æ–Ω–æ–º?",
                         reply_markup=q4_kb())
    await FSM.Q4.set()


@dp.message_handler(state=FSM.Q4)
async def Q5(message: Message):
    global tar
    match message.text:
        case "–Ü–Ω–∫–æ–ª–∏ –±—É–≤–∞—é":
            tar[3] = tar[3] + 1
        case "–ü–æ—Å—Ç—ñ–π–Ω–æ –±—É–≤–∞—éüòé":
            tar[3] = tar[3] + 3
    await message.answer("5 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
                         "–ù–∞–≤—ñ—â–æ –≤–∞–º —Ü–µ–π —Ç–∞—Ä–∏—Ñ?",
                         reply_markup=q5_kb())
    await FSM.Q5.set()


@dp.message_handler(state=FSM.Q5)
async def result(message: Message):
    tarif = 0
    max_bal = 0
    global tar
    match message.text:
        case "–î–ª—è –¥–∏—Ç–∏–Ω–∏üßí":
            tar[4] = tar[4] + 10
        case "–î–ª—è –ø–ª–∞–Ω—à–µ—Ç—É":
            tar[6] = tar[6] + 10
        case "–î–ª—è “ê–∞–¥–∂–µ—Ç—É‚åöÔ∏è":
            tar[5] = tar[5] + 10

    for i in range(0, len(tar)):
        if tar[i] > max_bal:
            max_bal = tar[i]
            tarif = i

    match tarif:
        case 0:
            text = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/vilniy-life-2021/")
            await message.answer("<b>–í—ñ—Ç–∞—é, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                 "–¢–æ–±—ñ —á—É–¥–æ–≤–æ –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ ¬´–í—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñ¬ª!\n\n"
                                 "–î–æ –Ω—å–æ–≥–æ –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ 1600—Ö–≤ –Ω–∞ –¥–≤—ñ–Ω–∫–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ\n\n" + text)
        case 1:
            text = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/smart-life-2021/")
            await message.answer("<b>–í—ñ—Ç–∞—é, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                 "–¢–æ–±—ñ —á—É–¥–æ–≤–æ –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ ¬´–°–º–∞—Ä—Ç –õ–∞–π—Ñ¬ª!\n\n"
                                 "–î–æ –Ω—å–æ–≥–æ –≤—Ö–æ–¥–∏—Ç—å 25–≥–± —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, 800—Ö–≤ –Ω–∞ –¥–≤—ñ–Ω–∫–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ, –∞ —â–µ –±–µ–∑–ª—ñ–º –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ —Ç–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ —Ä–æ–∑–¥–∞—á–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É!\n\n" + text)
        case 2:
            text = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/prosto-life-2021/")
            await message.answer("<b>–í—ñ—Ç–∞—é, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                 "–¢–æ–±—ñ —á—É–¥–æ–≤–æ –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ ¬´–ü—Ä–æ—Å—Ç–æ –õ–∞–π—Ñ¬ª!\n\n"
                                 "–î–æ –Ω—å–æ–≥–æ –≤—Ö–æ–¥–∏—Ç—å 8–≥–± —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Ç–∞ 300—Ö–≤ –Ω–∞ –¥–≤—ñ–Ω–∫–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ\n\n" + text)
        case 3:
            text = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/platinum-life-2021/")
            await message.answer("<b>–í—ñ—Ç–∞—é, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                 "–¢–æ–±—ñ —á—É–¥–æ–≤–æ –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ ¬´Platinum –õ–∞–π—Ñ¬ª!\n\n"
                                 "–î–æ –Ω—å–æ–≥–æ –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç, 3000—Ö–≤ –Ω–∞ –¥–≤—ñ–Ω–∫–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ, —Ä–æ—É–º—ñ–Ω–≥ —Ç–∞ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏!\n\n" + text)
        case 4:
            text = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/shkilniy/")
            await message.answer("<b>–í—ñ—Ç–∞—é, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                 "–¢–æ–±—ñ —á—É–¥–æ–≤–æ –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ ¬´–®–∫—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñ¬ª!\n\n"
                                 "–î–æ –Ω—å–æ–≥–æ –≤—Ö–æ–¥–∏—Ç—å 7–≥–± —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –±–µ–∑–ª—ñ–º –Ω–∞ lifecell, –±–µ–∑–ª—ñ–º –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ —Ç–∞ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ –∞ —Ç–∞–∫–æ–∂ –±–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ –¥–≤–∞ ¬´–û–±—Ä–∞–Ω—ñ –Ω–æ–º–µ—Ä–∏¬ª\n\n" + text)
        case 5:
            text = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ   ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/gadget-bezpeka/")
            text2 = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ   ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/gadget-smart21/")
            await message.answer("<b>–í—ñ—Ç–∞—é, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                 "–¢–æ–±—ñ —á—É–¥–æ–≤–æ –ø—ñ–¥—ñ–π–¥—É—Ç—å —Ç–∞—Ä–∏—Ñ–∏ ¬´“ê–∞–¥–∂–µ—Ç –ë–µ–∑–ø–µ–∫–∞¬ª —Ç–∞ ¬´“ê–∞–¥–∂–µ—Ç –°–º–∞—Ä—Ç¬ª!\n\n"
                                 "–î–æ –Ω–∏—Ö –≤—Ö–æ–¥–∏—Ç—å 150-500–º–± —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –Ω–∞ –¥–µ–Ω—å, 15-50—Ö–≤ –Ω–∞ –¥–∑–≤—ñ–Ω–∫–∏ –≤ –º–µ—Ä–µ–∂—ñ lifecell —Ç–∞ 15-50 SMS –≤ –¥–µ–Ω—å!\n\n" + text + text2)
        case 6:
            text = hlink("–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", "https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/gadget-tab21/")
            await message.answer("<b>–í—ñ—Ç–∞—é, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                                 "–¢–æ–±—ñ —á—É–¥–æ–≤–æ –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ ¬´“ê–∞–¥–∂–µ—Ç –ü–ª–∞–Ω—à–µ—Ç¬ª!\n\n"
                                 "–î–æ –Ω—å–æ–≥–æ –≤—Ö–æ–¥–∏—Ç—å 50–≥–± —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –±–µ–∑–ª—ñ–º –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ —Ç–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ —Ä–æ–∑–¥–∞—á–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É!\n\n" + text)

    await message.answer("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑?", reply_markup=start_kb())
    tar = [0, 0, 0, 0, 0, 0, 0]
    await FSM.Start.set()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
